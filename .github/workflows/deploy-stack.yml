name: reusable - deploy stack
on:
  workflow_call:
    inputs:
      image_app_ai: { required: true, type: string }
      image_app_be: { required: true, type: string }
      stack_dir:    { required: false, type: string, default: $HOME/stack }

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-g-learn-e
      cancel-in-progress: false
    steps:
      - name: SSH & deploy both apps
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          port:     ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -euo pipefail
            STACK_DIR="${{ inputs.stack_dir }}"
            SEC_DIR="$STACK_DIR/secrets"
            LOG_FASTAPI_DIR="$STACK_DIR/logs/fastapi"
            LOG_SPRING_DIR="$STACK_DIR/logs/spring"
            
            sudo install -d -m 777 "$STACK_DIR" "$SEC_DIR" "$LOG_FASTAPI_DIR" "$LOG_SPRING_DIR"

            # 1) Docker Hub 로그인
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # 2) 멀티라인 시크릿 → 서버 env 파일로 생성
            sudo tee "$SEC_DIR/fastapi.env" >/dev/null <<'EOF'
            ${{ secrets.FASTAPI_ENV_FILE }}
            EOF
            sudo chmod 777 "$SEC_DIR/fastapi.env"

            # 3B) application-prod.yml (멀티라인 시크릿 → 파일)
            sudo tee "$SEC_DIR/application-prod.yml" >/dev/null <<'EOF'
            ${{ secrets.SPRING_APP_PROD_YML }}
            EOF
            sudo chmod 777 "$SEC_DIR/application-prod.yml"
            
            # 3) AUTO-GENERATE compose.yml (no version key; Compose V2)
            sudo tee "$STACK_DIR/compose.yml" >/dev/null <<YAML
            services:
              fastapi_backend:
                image: ${{ inputs.image_app_ai }}:latest
                container_name: fastapi_backend
                ports: [ "8000:8000" ]
                env_file: [ "./secrets/fastapi.env" ]
                volumes:
                  - "$LOG_FASTAPI_DIR:/usr/src/app/logs"
                restart: unless-stopped
                logging: { driver: json-file, options: { max-size: "10m", max-file: "5" } }
                extra_hosts: [ "host.docker.internal:host-gateway" ]
                healthcheck:
                  test: ["CMD-SHELL","python - <<'PY'\nimport socket,sys\ns=socket.socket(); s.settimeout(1)\nsys.exit(0 if s.connect_ex(('localhost',8000))==0 else 1)\nPY"]
                  interval: 5s
                  timeout: 3s
                  retries: 30
                  start_period: 5s
            
              spring_backend:
                image: ${{ inputs.image_app_be }}:latest
                container_name: spring_backend
                ports: [ "8080:8080" ]
                environment:
                  - SPRING_PROFILES_ACTIVE=prod
                volumes:
                  - "$LOG_SPRING_DIR:/app/logs"
                  - "$SEC_DIR:/app/config:ro"
                depends_on:
                  fastapi_backend:
                    condition: service_healthy
                restart: unless-stopped
                logging: { driver: json-file, options: { max-size: "10m", max-file: "5" } }
                extra_hosts: [ "host.docker.internal:host-gateway" ]
                healthcheck:
                  test: ["CMD-SHELL","python - <<'PY'\nimport socket,sys\ns=socket.socket(); s.settimeout(1)\nsys.exit(0 if s.connect_ex(('localhost',8080))==0 else 1)\nPY"]
                  interval: 5s
                  timeout: 3s
                  retries: 30
                  start_period: 5s
            YAML

            # 4) Deploy (always replace both)
            sudo docker compose -f "$STACK_DIR/compose.yml" pull
            sudo docker compose -f "$STACK_DIR/compose.yml" up -d --pull always --force-recreate

            # 5) 둘 다 healthy 대기(타임아웃 60초). 실패 시 로그 찍고 종료
            wait_healthy() {
              name="$1"; timeout="$2"; elapsed=0
              while [ $elapsed -lt $timeout ]; do
                status="$(sudo docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$name" || true)"
                if [ "$status" = "healthy" ]; then
                  echo "$name is healthy"
                  return 0
                fi
                if [ "$status" = "unhealthy" ]; then
                  echo "$name is UNHEALTHY"
                  return 1
                fi
                sleep 2; elapsed=$((elapsed+2))
              done
              echo "$name healthcheck TIMEOUT"
              return 1
            }

            set +e
            ok=true
            wait_healthy fastapi_backend 60 || ok=false
            wait_healthy spring_backend 60  || ok=false
            set -e

            if [ "$ok" != "true" ]; then
              echo "==== docker compose ps ===="
              sudo docker compose -f "$STACK_DIR/compose.yml" ps
              echo "==== fastapi logs (tail) ===="
              sudo docker logs --tail=200 fastapi_backend || true
              echo "==== spring logs (tail) ===="
              sudo docker logs --tail=200 spring_backend || true
              exit 1
            fi

            # 6) Clean up old images
            sudo docker image prune -f
