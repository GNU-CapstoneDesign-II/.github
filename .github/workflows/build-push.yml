name: reusable - build & push
on:
  workflow_call:
    inputs:
      image_name: { required: true, type: string }
      context:    { required: true, type: string }
      dockerfile: { required: true, type: string }
    secrets:
      DOCKERHUB_USERNAME: { required: true }
      DOCKERHUB_TOKEN:    { required: true }

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Java/Gradle 감지 → 테스트
      - name: Set up JDK
        if: ${{ hashFiles(format('{0}/build.gradle*', inputs.context)) != '' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Make gradlew executable
        if: ${{ hashFiles(format('{0}/gradlew', inputs.context)) != '' }}
        run: chmod +x "${{ inputs.context }}/gradlew"

      - name: Gradle tests
        if: ${{ hashFiles(format('{0}/build.gradle*', inputs.context)) != '' }}
        working-directory: ${{ inputs.context }}
        run: ./gradlew clean test

      # Python 감지 → 테스트
      - name: Set up Python
        if: ${{ hashFiles(format('{0}/requirements.txt', inputs.context)) != '' }}
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: Python deps & tests
        if: ${{ hashFiles(format('{0}/requirements.txt', inputs.context)) != '' }}
        working-directory: ${{ inputs.context }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -d tests ] || [ -f pytest.ini ]; then pytest -q; else echo "no python tests"; fi

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image_name }}
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
